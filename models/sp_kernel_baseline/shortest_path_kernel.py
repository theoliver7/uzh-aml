import numpy as np
from grakel.kernels import ShortestPath
from sklearn.metrics import accuracy_score
from sklearn.svm import SVC

from GraKeL.grakel.datasets.base import fetch_dataset

DD_data = fetch_dataset("DD", verbose=False)
DD_d = np.array(DD_data.data)
DD_t = np.array(DD_data.target)
# Split data into train and test sets
# X_train, X_test, y_train, y_test = train_test_split(DD_d, DD_t, test_size=0.1, random_state=777)
test_indices = np.array(
    [529, 723, 1048, 282, 146, 1168, 147, 506, 857, 1049, 92, 1018, 377, 776, 594, 1148, 294, 754, 798, 488, 250, 980,
     918, 1169, 945, 1043, 579, 86, 297, 924, 1120, 877, 822, 234, 851, 696, 695, 660, 244, 625, 652, 812, 834, 842,
     702, 515, 310, 390, 687, 117, 192, 810, 121, 712, 1017, 104, 412, 632, 68, 236, 484, 19, 847, 926, 1040, 207, 64,
     124, 365, 187, 829, 555, 133, 431, 368, 987, 65, 174, 728, 990, 777, 809, 984, 534, 672, 290, 1095, 622, 545, 967,
     1006, 1138, 105, 963, 1110, 525, 915, 820, 755, 661, 220, 190, 916, 312, 821, 518, 873, 977, 782, 20, 988, 387,
     1115, 599, 799, 539, 960],dtype=np.int32)
print(DD_d.shape)
train_indices = np.array(
    [333, 1118, 837, 1081, 383, 202, 261, 747, 1021, 298, 833, 627, 992, 1083, 978, 100, 956, 164, 968, 1037, 33, 674,
     624, 400, 739, 813, 347, 676, 393, 846, 708, 648, 640, 1143, 1129, 366, 472, 453, 476, 163, 96, 27, 785, 547, 930,
     228, 442, 66, 618, 103, 218, 401, 263, 1097, 330, 216, 478, 1102, 32, 934, 504, 868, 1009, 1106, 1004, 1047, 666,
     1162, 831, 325, 149, 158, 788, 156, 116, 949, 84, 1177, 482, 1121, 1002, 28, 162, 462, 46, 420, 399, 981, 125, 374,
     1032, 138, 414, 979, 1163, 532, 359, 417, 314, 951, 892, 111, 380, 974, 179, 18, 853, 825, 1114, 1062, 565, 189,
     858, 1011, 175, 114, 1038, 800, 196, 638, 557, 434, 285, 91, 769, 241, 157, 721, 357, 204, 1150, 1073, 763, 940,
     1061, 454, 160, 1128, 513, 576, 879, 605, 686, 240, 657, 508, 8, 936, 867, 490, 597, 1154, 1069, 1053, 808, 311,
     1016, 256, 217, 845, 835, 385, 432, 570, 39, 1026, 630, 123, 1170, 616, 498, 458, 362, 683, 784, 120, 711, 292,
     153, 577, 437, 750, 75, 41, 144, 473, 996, 512, 744, 946, 998, 353, 36, 31, 378, 433, 283, 315, 642, 447, 495, 201,
     72, 1072, 421, 95, 245, 1161, 415, 841, 730, 457, 553, 791, 1028, 48, 794, 815, 343, 1130, 79, 743, 1164, 182, 921,
     1023, 894, 745, 1149, 270, 403, 933, 51, 1074, 49, 1158, 540, 1135, 445, 427, 319, 976, 6, 1146, 166, 797, 709,
     654, 909, 430, 1010, 593, 610, 246, 682, 327, 321, 424, 806, 1029, 22, 705, 993, 405, 446, 180, 500, 1137, 1050,
     1159, 198, 1052, 1015, 855, 444, 264, 653, 707, 582, 107, 1124, 601, 807, 759, 9, 688, 738, 348, 43, 872, 195, 775,
     287, 384, 464, 966, 60, 177, 145, 1056, 1064, 465, 733, 1166, 876, 549, 212, 259, 203, 669, 1105, 487, 954, 817,
     170, 205, 255, 448, 1176, 210, 693, 226, 1094, 994, 77, 329, 1107, 165, 332, 5, 143, 779, 541, 900, 1104, 429, 115,
     971, 322, 40, 600, 903, 901, 899, 2, 751, 71, 388, 764, 1020, 679, 483, 770, 544, 1008, 38, 1075, 242, 1055, 191,
     1, 450, 89, 85, 1136, 381, 418, 571, 985, 854, 1051, 801, 1141, 701, 1092, 344, 267, 727, 17, 885, 649, 814, 422,
     882, 786, 499, 316, 63, 850, 729, 573, 1063, 411, 440, 141, 757, 29, 621, 1031, 93, 771, 249, 888, 904, 222, 167,
     503, 869, 920, 864, 604, 1108, 428, 778, 952, 548, 1100, 826, 1022, 268, 235, 635, 614, 352, 836, 338, 81, 511,
     719, 247, 206, 252, 1090, 460, 284, 491, 535, 361, 130, 1155, 439, 753, 914, 880, 986, 90, 805, 339, 832, 83, 612,
     1153, 101, 1058, 1145, 55, 369, 562, 671, 21, 746, 803, 556, 94, 887, 25, 109, 584, 896, 358, 552, 97, 619, 588,
     1157, 1147, 787, 102, 30, 34, 895, 99, 859, 937, 253, 280, 1131, 742, 494, 704, 856, 629, 796, 1071, 173, 349,
     1001, 150, 678, 1151, 623, 684, 480, 127, 783, 881, 1080, 336, 1084, 1068, 463, 1025, 1089, 1111, 238, 382, 802,
     720, 443, 168, 950, 932, 1070, 874, 1033, 726, 0, 1175, 1160, 1167, 690, 142, 397, 98, 631, 237, 449, 459, 274,
     1057, 286, 717, 617, 692, 792, 1079, 461, 386, 523, 748, 790, 964, 989, 328, 694, 497, 762, 575, 862, 1144, 3, 303,
     231, 890, 1024, 870, 243, 1123, 999, 1142, 110, 1172, 1091, 1101, 520, 169, 1088, 1173, 922, 935, 948, 350, 307,
     467, 26, 893, 373, 665, 356, 309, 78, 281, 639, 1119, 493, 7, 155, 768, 680, 658, 522, 1140, 176, 732, 839, 958,
     919, 715, 161, 602, 611, 335, 691, 126, 589, 583, 118, 789, 1041, 865, 947, 426, 466, 305, 395, 756, 408, 295, 402,
     80, 135, 1085, 23, 410, 1014, 496, 1122, 254, 722, 1113, 780, 891, 875, 774, 16, 1078, 355, 710, 861, 827, 1127,
     550, 530, 394, 266, 1165, 675, 911, 232, 371, 88, 248, 849, 122, 633, 724, 923, 183, 804, 213, 159, 52, 112, 898,
     995, 587, 13, 906, 561, 615, 656, 643, 320, 706, 354, 413, 441, 1076, 507, 148, 824, 214, 211, 208, 291, 1156, 477,
     1003, 1087, 1035, 438, 271, 154, 907, 905, 1012, 886, 1046, 736, 1103, 59, 407, 878, 586, 272, 342, 341, 363, 685,
     603, 1066, 929, 897, 69, 781, 592, 423, 334, 636, 1039, 609, 300, 47, 840, 536, 278, 1067, 239, 199, 277, 1171,
     559, 823, 1082, 608, 517, 1086, 765, 257, 4, 376, 367, 641, 521, 225, 889, 983, 848, 224, 1030, 1045, 87, 184, 943,
     260, 1005, 961, 537, 436, 345, 416, 725, 1133, 568, 340, 908, 233, 151, 468, 818, 698, 700, 37, 931, 844, 82, 58,
     526, 668, 620, 613, 53, 795, 451, 1060, 404, 830, 14, 293, 514, 1098, 574, 1117, 119, 793, 551, 74, 883, 251, 318,
     1036, 581, 699, 538, 136, 1054, 15, 578, 288, 767, 470, 554, 713, 62, 563, 735, 181, 1132, 871, 229, 269, 760, 128,
     308, 997, 326, 372, 863, 452, 737, 595, 681, 178, 265, 519, 953, 969, 957, 258, 193, 703, 1000, 129, 132, 645, 973,
     910, 772, 1013, 962, 11, 647, 866, 134, 716, 364, 276, 941, 531, 527, 469, 752, 398, 139, 819, 1096, 542, 227,
     1065, 474, 455, 392, 741, 673, 659, 219, 230, 1134, 406, 275, 10, 370, 435, 501, 667, 1034, 273, 644, 925, 486,
     331, 1109, 524, 215, 197, 510, 970, 598, 140, 45, 375, 185, 852, 591, 351, 50, 108, 838, 917, 509, 607, 1126, 590,
     304, 749, 323, 409, 475, 646, 982, 279, 317, 73, 944, 262, 516, 76, 959, 209, 1007, 44, 1044, 194, 1093, 567, 492,
     560, 546, 172, 655, 884, 396, 663, 569, 816, 942, 734, 637, 54, 106, 471, 955, 566, 991, 564, 758, 306, 56, 913,
     456, 419, 662, 289, 337, 324, 626, 1139, 650, 580, 389, 391, 137, 296, 479, 113, 12, 714, 379, 634, 558, 24, 152,
     221, 302, 912, 664, 965, 585, 697, 360, 131, 1059, 301, 1099, 928, 677, 200, 1174, 596, 572, 171, 975, 1112, 186,
     927, 1019, 528, 972, 628, 773, 1027, 1042, 718, 61, 938, 42, 731, 651, 188, 860, 35, 740, 67, 843, 57, 489, 689,
     425, 606, 346, 828, 766, 70, 811, 299, 313, 481, 670, 1116, 1152, 485, 223, 502, 543, 1125, 761, 1077, 533, 505,
     902, 939],dtype=np.int32)

X_train = DD_d[train_indices]
y_train = DD_t[train_indices]
X_test = DD_d[test_indices]
y_test = DD_t[test_indices]

# Define kernel
kernel = ShortestPath(normalize=True, with_labels=False)

# Compute kernel matrices
K_train = kernel.fit_transform(X_train)
K_test = kernel.transform(X_test)

# Train SVM with the computed kernel
svm = SVC(kernel='precomputed')
svm.fit(K_train, y_train)

y_train_pred = svm.predict(K_train)
accuracy = accuracy_score(y_train, y_train_pred)
print(f"Training Accuracy: {accuracy:.4f}")

# Predictions
y_pred = svm.predict(K_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Test Accuracy: {accuracy:.4f}")